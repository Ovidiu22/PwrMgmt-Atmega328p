
PwrMgmt-Atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000867  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075c  00000000  00000000  00000b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000763  00000000  00000000  0000126f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000079b7  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d9  00000000  00000000  00009417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000094f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002ba7  00000000  00000000  00009528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	8e c0       	rjmp	.+284    	; 0x136 <__vector_6>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	2c d0       	rcall	.+88     	; 0xe4 <main>
  8c:	6e c0       	rjmp	.+220    	; 0x16a <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <PwrMngmnt_init>:
Description:initialization of power management / watchdog
******************************************************************** */
void PwrMngmnt_init(void)
{
	/* Disable global interrupts */
	cli(); 
  90:	f8 94       	cli
	
	/* Clear the reset flag. */
	MCUSR &= ~(1<<WDRF); // WDRF is set if a WDG system reset occurs
  92:	84 b7       	in	r24, 0x34	; 52
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	84 bf       	out	0x34, r24	; 52
  
	/* In order to change WDE or the prescaler, we need to
	* set WDCE (This will allow updates for 4 clock cycles).
	*/
	WDTCSR |= (1<<WDCE) | (1<<WDE);
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	88 61       	ori	r24, 0x18	; 24
  a0:	80 83       	st	Z, r24

	/* set new watchdog timeout prescaler value */
	WDTCSR = 1<<WDP0 | 1<<WDP3; /* 8.0 seconds */
  a2:	81 e2       	ldi	r24, 0x21	; 33
  a4:	80 83       	st	Z, r24
  
	/* Enable global interrupts */
	sei();
  a6:	78 94       	sei
	
	/* Enable watchdog interrupt */
	WDTCSR |= (1 << WDIE);
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	81 7f       	andi	r24, 0xF1	; 241
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
  b8:	83 b7       	in	r24, 0x33	; 51
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
  be:	83 b7       	in	r24, 0x33	; 51
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	83 bf       	out	0x33, r24	; 51
  c4:	88 95       	sleep
  c6:	83 b7       	in	r24, 0x33	; 51
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
  d2:	e4 e6       	ldi	r30, 0x64	; 100
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 71       	andi	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <PwrMngmnt_main>:
Description:main function of power management
******************************************************************** */
void PwrMngmnt_main(void)
{
	/* Initialize watchdog */
	PwrMngmnt_init();
  de:	d8 df       	rcall	.-80     	; 0x90 <PwrMngmnt_init>

	/* Re-enter sleep mode. */
	enterSleep();
  e0:	e7 cf       	rjmp	.-50     	; 0xb0 <enterSleep>
  e2:	08 95       	ret

000000e4 <main>:
  e4:	57 9a       	sbi	0x0a, 7	; 10
int main(void)
{
	/* Set LED pin as output */
	LED_DDR |= 1<<LED_pin;
	
	while( f_wdt == 1)
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f9 f4       	brne	.+62     	; 0x130 <main+0x4c>
	{
		/* Some sequence */
		LED_port |= (1<<LED_pin);	// Turn LED on
  f2:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	8b e7       	ldi	r24, 0x7B	; 123
  f8:	92 e9       	ldi	r25, 0x92	; 146
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x16>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x20>
 104:	00 00       	nop
		_delay_ms(3000);			// Wait 3 sec
		LED_port &= ~(1<<LED_pin);	// Turn LED off
 106:	5f 98       	cbi	0x0b, 7	; 11
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	8b e7       	ldi	r24, 0x7B	; 123
 10c:	92 e9       	ldi	r25, 0x92	; 146
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x2a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x34>
 118:	00 00       	nop
		_delay_ms(3000);			// Wait 3 sec to stabilize current -> reference for sleep modes measurements
	
		/* Clear the watchdog flag */
		f_wdt = 0;
 11a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		
		/* Power management */
		PwrMngmnt_main();
 122:	dd df       	rcall	.-70     	; 0xde <PwrMngmnt_main>
int main(void)
{
	/* Set LED pin as output */
	LED_DDR |= 1<<LED_pin;
	
	while( f_wdt == 1)
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	09 f3       	breq	.-62     	; 0xf2 <main+0xe>
		
		/* Power management */
		PwrMngmnt_main();
	}
	return 0;
}
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret

00000136 <__vector_6>:
 *  Description: Watchdog Interrupt Service. This
 *               is executed when watchdog timed out.
 *
 ***************************************************/
ISR(WDT_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	if(f_wdt == 0)
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 14c:	89 2b       	or	r24, r25
 14e:	31 f4       	brne	.+12     	; 0x15c <__vector_6+0x26>
	{
		f_wdt = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}

 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
